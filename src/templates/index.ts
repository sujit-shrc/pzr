import { ProjectConfig } from "../types.js";

type TemplateFunction = (config: ProjectConfig) => string;

interface TemplateMap {
  [key: string]: {
    [key: string]: TemplateFunction;
  };
}

const templates: TemplateMap = {
  nextJs: {
    page: ({ language }) => `
${language === "TypeScript" ? "import React from 'react';" : ""}

export default function Page() {
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-4">New Page</h1>
      <p className="text-lg">This is a new page generated by the pzr CLI helper.</p>
    </div>
  );
}
`,
    layout: ({ language }) => `
${language === "TypeScript" ? "import React from 'react';" : ""}

export default function Layout({ children }${language === "TypeScript" ? ": { children: React.ReactNode }" : ""}) {
  return (
    <div>
      <nav className="bg-gray-800 text-white p-4">
        <ul className="flex space-x-4">
          <li><a href="/" className="hover:text-gray-300">Home</a></li>
        </ul>
      </nav>
      <main className="container mx-auto px-4 py-8">{children}</main>
    </div>
  );
}
`,
    loading: ({ language }) => `
${language === "TypeScript" ? "import React from 'react';" : ""}

export default function Loading() {
  return (
    <div className="flex justify-center items-center h-[90vh]">
      <div className="animate-spin rounded-full h-14 w-14 border-t-2 border-b-2 border-gray-500"></div>
    </div>
  );
}
`,
  },
  express: {
    controller: ({ language }) => `
${language === "TypeScript" ? "import { Request, Response } from 'express';" : ""}

export const getAll = (req${language === "TypeScript" ? ": Request" : ""}, res${language === "TypeScript" ? ": Response" : ""}) => {
  res.json({ message: 'Get all items' });
};

export const getOne = (req${language === "TypeScript" ? ": Request" : ""}, res${language === "TypeScript" ? ": Response" : ""}) => {
  const id = req.params.id;
  res.json({ message: \`Get item \${id}\` });
};

export const create = (req${language === "TypeScript" ? ": Request" : ""}, res${language === "TypeScript" ? ": Response" : ""}) => {
  res.json({ message: 'Create item' });
};

export const update = (req${language === "TypeScript" ? ": Request" : ""}, res${language === "TypeScript" ? ": Response" : ""}) => {
  const id = req.params.id;
  res.json({ message: \`Update item \${id}\` });
};

export const remove = (req${language === "TypeScript" ? ": Request" : ""}, res${language === "TypeScript" ? ": Response" : ""}) => {
  const id = req.params.id;
  res.json({ message: \`Remove item \${id}\` });
};
`,
    model: ({ language }) => `
${language === "TypeScript" ? "import mongoose, { Schema, Document } from 'mongoose';" : "const mongoose = require('mongoose');"}

${language === "TypeScript" ? "export interface IItem extends Document {" : ""}
${language === "TypeScript" ? "  name: string;" : ""}
${language === "TypeScript" ? "  description: string;" : ""}
${language === "TypeScript" ? "  createdAt: Date;" : ""}
${language === "TypeScript" ? "}" : ""}

const itemSchema = new ${language === "TypeScript" ? "Schema" : "mongoose.Schema"}({
  name: { type: String, required: true },
  description: { type: String, required: true },
  createdAt: { type: Date, default: Date.now }
});

${language === "TypeScript" ? "export default mongoose.model<IItem>('Item', itemSchema);" : "module.exports = mongoose.model('Item', itemSchema);"}
`,
    route: ({ language }) => `
${language === "TypeScript" ? "import express from 'express';" : "const express = require('express');"}
${language === "TypeScript" ? "import * as controller from '../controllers/[resource]';" : "const controller = require('../controllers/[resource]');"}

const router = express.Router();

router.get('/', controller.getAll);
router.get('/:id', controller.getOne);
router.post('/', controller.create);
router.put('/:id', controller.update);
router.delete('/:id', controller.remove);

${language === "TypeScript" ? "export default router;" : "module.exports = router;"}
`,
  },
  viteReact: {
    component: ({ language }) => `
${language === "TypeScript" ? "import React from 'react';" : ""}

${language === "TypeScript" ? "interface Props {" : ""}
${language === "TypeScript" ? "  title: string;" : ""}
${language === "TypeScript" ? "}" : ""}

const Component = ({ title }${language === "TypeScript" ? ": Props" : ""}) => {
  return (
    <div className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
      <h2 className="text-2xl font-bold mb-4">{title}</h2>
      <p className="text-gray-700 text-base">
        This is a new component generated by the pzr CLI helper.
      </p>
    </div>
  );
};

export default Component;
`,
  },
};

export function getTemplate(
  framework: keyof typeof templates,
  type: string,
  config: ProjectConfig,
): string {
  const frameworkTemplates = templates[framework];
  if (!frameworkTemplates) {
    throw new Error(`Unsupported framework: ${framework}`);
  }
  const template = frameworkTemplates[type];
  if (!template) {
    throw new Error(
      `Unsupported template type: ${type} for framework: ${framework}`,
    );
  }
  return template(config);
}
